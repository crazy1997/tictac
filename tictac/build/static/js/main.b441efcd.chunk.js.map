{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Square","props","react_default","a","createElement","className","onClick","value","Board","i","_this","this","squares","renderSquare","React","Component","calcWinner","lines","length","_lines$i","Object","slicedToArray","b","c","Game","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","stepNumber","xIsNext","slice","setState","concat","step","status","_this3","current","winner","moves","map","move","desc","key","jumpTo","App_Board","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b441efcd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction Square(props){\n  return(\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square  \n      value={this.props.squares[i]}\n      onClick={()=> this.props.onClick(i)}/>;\n  }\n\n  render(){\n    return (\n      <div> \n        <div className=\"status\" >{}</div>\n\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    ); \n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    }\n  }\n\n    handleClick(i) {\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n      if (calcWinner(squares) || squares[i]) {\n        return;\n      }\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\n      this.setState({\n        history: history.concat([{\n          squares: squares,\n        }]),\n        stepNumber: history.length,\n        xIsNext: !this.state.xIsNext,\n      });\n    };\n\n    jumpTo(step) {\n      this.setState({\n        stepNumber: step,\n        xIsNext: (step % 2) === 0,\n      });\n    }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calcWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ? \n      'Перейти к ходу #' + move:\n      'К началу игры';\n      return (\n      <li key={move}>\n          <button onClick={()=> this.jumpTo(move)}>{desc}</button>\n      </li>\n      );\n    });\n  \n\n    let status;\n    if (winner) {\n      status = \"Выиграл\" + winner;\n    } else {\n      status = \"следующий ход \" + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return(\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n          squares = {current.squares}\n          onClick={(i) => this.handleClick(i)}/>\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calcWinner(squares){\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for(let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './App';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}